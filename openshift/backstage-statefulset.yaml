kind: StatefulSet
apiVersion: apps/v1
metadata:
  annotations:
    meta.helm.sh/release-name: backstage
    meta.helm.sh/release-namespace: backstage
  resourceVersion: '646600'
  name: backstage-postgresql
  uid: 135c30b0-453d-45a8-bd58-36617fa2af66
  creationTimestamp: '2025-02-03T15:04:46Z'
  generation: 1
  managedFields:
    - manager: Mozilla
      operation: Update
      apiVersion: apps/v1
      time: '2025-02-03T15:04:46Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:meta.helm.sh/release-name': {}
            'f:meta.helm.sh/release-namespace': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/component': {}
            'f:app.kubernetes.io/instance': {}
            'f:app.kubernetes.io/managed-by': {}
            'f:app.kubernetes.io/name': {}
            'f:helm.sh/chart': {}
        'f:spec':
          'f:podManagementPolicy': {}
          'f:volumeClaimTemplates': {}
          'f:serviceName': {}
          'f:template':
            'f:metadata':
              'f:labels':
                .: {}
                'f:app.kubernetes.io/component': {}
                'f:app.kubernetes.io/instance': {}
                'f:app.kubernetes.io/managed-by': {}
                'f:app.kubernetes.io/name': {}
                'f:helm.sh/chart': {}
              'f:name': {}
            'f:spec':
              'f:volumes':
                .: {}
                'k:{"name":"dshm"}':
                  .: {}
                  'f:emptyDir':
                    .: {}
                    'f:medium': {}
                  'f:name': {}
              'f:containers':
                'k:{"name":"postgresql"}':
                  'f:image': {}
                  'f:volumeMounts':
                    .: {}
                    'k:{"mountPath":"/dev/shm"}':
                      .: {}
                      'f:mountPath': {}
                      'f:name': {}
                    'k:{"mountPath":"/var/lib/pgsql/data"}':
                      .: {}
                      'f:mountPath': {}
                      'f:name': {}
                  'f:terminationMessagePolicy': {}
                  .: {}
                  'f:resources':
                    .: {}
                    'f:requests':
                      .: {}
                      'f:cpu': {}
                      'f:memory': {}
                  'f:livenessProbe':
                    .: {}
                    'f:exec':
                      .: {}
                      'f:command': {}
                    'f:failureThreshold': {}
                    'f:initialDelaySeconds': {}
                    'f:periodSeconds': {}
                    'f:successThreshold': {}
                    'f:timeoutSeconds': {}
                  'f:env':
                    'k:{"name":"POSTGRESQL_PORT_NUMBER"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"BITNAMI_DEBUG"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"PGDATA"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRESQL_VOLUME_DIR"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRESQL_CLIENT_MIN_MESSAGES"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRESQL_SHARED_PRELOAD_LIBRARIES"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRESQL_ADMIN_PASSWORD"}':
                      .: {}
                      'f:name': {}
                      'f:valueFrom':
                        .: {}
                        'f:secretKeyRef': {}
                    'k:{"name":"POSTGRESQL_LOG_HOSTNAME"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    .: {}
                    'k:{"name":"POSTGRES_DATABASE"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRESQL_LOG_CONNECTIONS"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRES_PASSWORD"}':
                      .: {}
                      'f:name': {}
                      'f:valueFrom':
                        .: {}
                        'f:secretKeyRef': {}
                    'k:{"name":"POSTGRESQL_PGAUDIT_LOG_CATALOG"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRESQL_ENABLE_TLS"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRESQL_ENABLE_LDAP"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                    'k:{"name":"POSTGRESQL_LOG_DISCONNECTIONS"}':
                      .: {}
                      'f:name': {}
                      'f:value': {}
                  'f:readinessProbe':
                    .: {}
                    'f:exec':
                      .: {}
                      'f:command': {}
                    'f:failureThreshold': {}
                    'f:initialDelaySeconds': {}
                    'f:periodSeconds': {}
                    'f:successThreshold': {}
                    'f:timeoutSeconds': {}
                  'f:terminationMessagePath': {}
                  'f:imagePullPolicy': {}
                  'f:ports':
                    .: {}
                    'k:{"containerPort":5432,"protocol":"TCP"}':
                      .: {}
                      'f:containerPort': {}
                      'f:name': {}
                      'f:protocol': {}
                  'f:name': {}
              'f:dnsPolicy': {}
              'f:serviceAccount': {}
              'f:restartPolicy': {}
              'f:schedulerName': {}
              'f:terminationGracePeriodSeconds': {}
              'f:serviceAccountName': {}
              'f:securityContext': {}
              'f:affinity':
                .: {}
                'f:podAntiAffinity':
                  .: {}
                  'f:preferredDuringSchedulingIgnoredDuringExecution': {}
          'f:replicas': {}
          'f:updateStrategy':
            'f:rollingUpdate':
              .: {}
              'f:partition': {}
            'f:type': {}
          'f:selector': {}
          'f:revisionHistoryLimit': {}
          'f:persistentVolumeClaimRetentionPolicy':
            .: {}
            'f:whenDeleted': {}
            'f:whenScaled': {}
    - manager: kube-controller-manager
      operation: Update
      apiVersion: apps/v1
      time: '2025-02-04T00:24:03Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          'f:currentReplicas': {}
          'f:currentRevision': {}
          'f:updatedReplicas': {}
          'f:readyReplicas': {}
          'f:replicas': {}
          'f:availableReplicas': {}
          'f:collisionCount': {}
          'f:observedGeneration': {}
          'f:updateRevision': {}
      subresource: status
  namespace: backstage2
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: backstage
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.10.0
spec:
  serviceName: backstage-postgresql-hl
  revisionHistoryLimit: 10
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: data
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  template:
    metadata:
      name: backstage-postgresql
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: backstage
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.10.0
    spec:
      restartPolicy: Always
      serviceAccountName: default
      schedulerName: default-scheduler
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: primary
                    app.kubernetes.io/instance: backstage
                    app.kubernetes.io/name: postgresql
                topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
      securityContext: {}
      containers:
        - resources:
            requests:
              cpu: 250m
              memory: 256Mi
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - '-c'
                - '-e'
                - |
                  exec pg_isready -U "postgres" -d "dbname=backstage" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          terminationMessagePath: /dev/termination-log
          name: postgresql
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - '-c'
                - exec pg_isready -U "postgres" -d "dbname=backstage" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          env:
            - name: BITNAMI_DEBUG
              value: 'false'
            - name: POSTGRESQL_PORT_NUMBER
              value: '5432'
            - name: POSTGRESQL_VOLUME_DIR
              value: /var/lib/pgsql/data
            - name: PGDATA
              value: /var/lib/pgsql/data/userdata
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backstage-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: backstage
            - name: POSTGRESQL_ENABLE_LDAP
              value: 'no'
            - name: POSTGRESQL_ENABLE_TLS
              value: 'no'
            - name: POSTGRESQL_LOG_HOSTNAME
              value: 'false'
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: 'false'
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: 'false'
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: 'off'
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backstage-postgresql
                  key: postgres-password
          ports:
            - name: tcp-postgresql
              containerPort: 5432
              protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /var/lib/pgsql/data
          terminationMessagePolicy: File
          image: 'registry.redhat.io/rhel9/postgresql-13:1-73'
      serviceAccount: default
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
      dnsPolicy: ClusterFirst
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: backstage
      app.kubernetes.io/name: postgresql
status:
  observedGeneration: 1
  availableReplicas: 1
  updateRevision: backstage-postgresql-b58d99cbb
  currentRevision: backstage-postgresql-b58d99cbb
  currentReplicas: 1
  updatedReplicas: 1
  replicas: 1
  collisionCount: 0
  readyReplicas: 1
