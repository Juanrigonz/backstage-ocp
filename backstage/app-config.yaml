app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: Backstage

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  #http://backstage.apps-crc.testing
  #baseUrl: http://backstage-staging-dev.ocp1.ch.dev.cmps.paas.f1rstbr.corp
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    #origin: http://localhost:7007
    #methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    #redentials: true
    origin: http://*.${DNS}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
    Access-Control-Allow-Origin: '*'
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    # client: better-sqlite3
    # connection: ':memory:'
   client: pg
   connection:
     host: ${POSTGRES_HOST}
     port: ${POSTGRES_PORT}
     user: ${POSTGRES_USER}
     password: ${POSTGRES_PASSWORD}

  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
#  github:
#    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
#      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}
  #gitlab:
  #  - host: gitlab.com
  #    token: glpat-AxyDLJTondje7xBE6os4    
  #    apiBaseUrl: https://gitlab.consulting.redhat.com/api/v4
  #    baseUrl: https://gitlab.consulting.redhat.com      
 gitlab:
    - host: pdmtdagap01.cl.bsch
      token: RxAx9a2GYsF9_FudtiiJ
      apiBaseUrl: http://pdmtdagap01.cl.bsch/api/v4
      baseUrl: http://pdmtdagap01.cl.bsch
jenkins:
   baseUrl: http://pgsthagjk01.cl.bsch
   username: user_jenkins
   apiKey: 11bf4af975df634042b16e2a5d4f2484ae
   #apiKey: pdmtdagap01.cl.bsch 
   #baseUrl: https://jenkins-jenkins.apps.cluster-sz554.sz554.sandbox1438.opentlc.com
   #baseUrl: http://10.89.0.2:8080   
   #username: juanri
   #apiKey: 11a129afe508a625b58013b8f67e0e8550
   
proxy:
 #'/jenkins/api':
 #   target: 'http://localhost:8080'
 #   changeOrigin: true
 #   headers:
 #     Authorization: Basic anVhbmdvbno6MTE4ZjJlMmEwYmI3ZTQ2OTkxNWYwOGFkMDA3YThkZTk1OQ==
  
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true

# proxy:
  #  '/api':  # This defines the endpoint you want to proxy (like '/api')
  #    target: 'http//localhost:7007'  # Target backend API address (for example, running on localhost)
  #    changeOrigin: true  # Ensures the Origin header matches the target's origin
  #    pathRewrite:
  #      '^/api': ''  # Optionally, remove '/api' from the path when forwarding to the target backend



# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.


auth:
  environment: development 
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    guest: {} 
    #oauth2Proxy: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: /app/examples/entities.yaml

    # Local example template
    - type: file
      target: /app/examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: /app/examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    - type: url
      target: http://pdmtdagap01.cl.bsch

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
