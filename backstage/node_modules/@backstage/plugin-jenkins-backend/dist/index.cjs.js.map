{"version":3,"file":"index.cjs.js","sources":["../src/service/jenkinsInfoProvider.ts","../src/service/jenkinsApi.ts","../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CatalogApi } from '@backstage/catalog-client';\nimport {\n  Entity,\n  CompoundEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\n\n/** @public */\nexport interface JenkinsInfoProvider {\n  getInstance(options: {\n    /**\n     * The entity to get the info about.\n     */\n    entityRef: CompoundEntityRef;\n    /**\n     * A specific job to get. This is only passed in when we know about a job name we are interested in.\n     */\n    jobFullName?: string;\n\n    backstageToken?: string;\n  }): Promise<JenkinsInfo>;\n}\n\n/** @public */\nexport interface JenkinsInfo {\n  baseUrl: string;\n  headers?: Record<string, string | string[]>;\n  jobFullName: string; // TODO: make this an array\n  crumbIssuer?: boolean;\n}\n\n/** @public */\nexport interface JenkinsInstanceConfig {\n  name: string;\n  baseUrl: string;\n  username: string;\n  apiKey: string;\n  crumbIssuer?: boolean;\n  /**\n   * Extra headers to send to Jenkins instance\n   */\n  extraRequestHeaders?: Record<string, string>;\n}\n\n/**\n * Holds multiple Jenkins configurations.\n *\n * @public\n */\nexport class JenkinsConfig {\n  constructor(public readonly instances: JenkinsInstanceConfig[]) {}\n\n  /**\n   * Read all Jenkins instance configurations.\n   * @param config - Root configuration\n   * @returns A JenkinsConfig that contains all configured Jenkins instances.\n   */\n  static fromConfig(config: Config): JenkinsConfig {\n    const DEFAULT_JENKINS_NAME = 'default';\n\n    const jenkinsConfig = config.getConfig('jenkins');\n\n    // load all named instance config\n    const namedInstanceConfig: JenkinsInstanceConfig[] =\n      jenkinsConfig.getOptionalConfigArray('instances')?.map(c => ({\n        name: c.getString('name'),\n        baseUrl: c.getString('baseUrl'),\n        username: c.getString('username'),\n        apiKey: c.getString('apiKey'),\n        extraRequestHeaders: c.getOptional('extraRequestHeaders'),\n        crumbIssuer: c.getOptionalBoolean('crumbIssuer'),\n      })) || [];\n\n    // load unnamed default config\n    const hasNamedDefault = namedInstanceConfig.some(\n      x => x.name === DEFAULT_JENKINS_NAME,\n    );\n\n    // Get these as optional strings and check to give a better error message\n    const baseUrl = jenkinsConfig.getOptionalString('baseUrl');\n    const username = jenkinsConfig.getOptionalString('username');\n    const apiKey = jenkinsConfig.getOptionalString('apiKey');\n    const crumbIssuer = jenkinsConfig.getOptionalBoolean('crumbIssuer');\n    const extraRequestHeaders = jenkinsConfig.getOptional<\n      JenkinsInstanceConfig['extraRequestHeaders']\n    >('extraRequestHeaders');\n\n    if (hasNamedDefault && (baseUrl || username || apiKey)) {\n      throw new Error(\n        `Found both a named jenkins instance with name ${DEFAULT_JENKINS_NAME} and top level baseUrl, username or apiKey config. Use only one style of config.`,\n      );\n    }\n\n    const unnamedNonePresent = !baseUrl && !username && !apiKey;\n    const unnamedAllPresent = baseUrl && username && apiKey;\n    if (!(unnamedAllPresent || unnamedNonePresent)) {\n      throw new Error(\n        `Found partial default jenkins config. All (or none) of baseUrl, username and apiKey must be provided.`,\n      );\n    }\n\n    if (unnamedAllPresent) {\n      return new JenkinsConfig([\n        ...namedInstanceConfig,\n        {\n          name: DEFAULT_JENKINS_NAME,\n          baseUrl,\n          username,\n          apiKey,\n          extraRequestHeaders,\n          crumbIssuer,\n        },\n      ]);\n    }\n\n    return new JenkinsConfig(namedInstanceConfig);\n  }\n\n  /**\n   * Gets a Jenkins instance configuration by name, or the default one if no\n   * name is provided.\n   * @param jenkinsName - Optional name of the Jenkins instance.\n   * @returns The requested Jenkins instance.\n   */\n  getInstanceConfig(jenkinsName?: string): JenkinsInstanceConfig {\n    const DEFAULT_JENKINS_NAME = 'default';\n\n    if (!jenkinsName || jenkinsName === DEFAULT_JENKINS_NAME) {\n      // no name provided, use default\n      const instanceConfig = this.instances.find(\n        c => c.name === DEFAULT_JENKINS_NAME,\n      );\n\n      if (!instanceConfig) {\n        throw new Error(\n          `Couldn't find a default jenkins instance in the config. Either configure an instance with name ${DEFAULT_JENKINS_NAME} or add a prefix to your annotation value.`,\n        );\n      }\n\n      return instanceConfig;\n    }\n\n    // A name is provided, look it up.\n    const instanceConfig = this.instances.find(c => c.name === jenkinsName);\n\n    if (!instanceConfig) {\n      throw new Error(\n        `Couldn't find a jenkins instance in the config with name ${jenkinsName}`,\n      );\n    }\n    return instanceConfig;\n  }\n}\n\n/**\n * Use default config and annotations, build using fromConfig static function.\n *\n * This will fallback through various deprecated config and annotation schemes.\n *\n * @public\n */\nexport class DefaultJenkinsInfoProvider implements JenkinsInfoProvider {\n  static readonly OLD_JENKINS_ANNOTATION = 'jenkins.io/github-folder';\n  static readonly NEW_JENKINS_ANNOTATION = 'jenkins.io/job-full-name';\n\n  private constructor(\n    private readonly config: JenkinsConfig,\n    private readonly catalog: CatalogApi,\n  ) {}\n\n  static fromConfig(options: {\n    config: Config;\n    catalog: CatalogApi;\n  }): DefaultJenkinsInfoProvider {\n    return new DefaultJenkinsInfoProvider(\n      JenkinsConfig.fromConfig(options.config),\n      options.catalog,\n    );\n  }\n\n  async getInstance(opt: {\n    entityRef: CompoundEntityRef;\n    jobFullName?: string;\n    backstageToken?: string;\n  }): Promise<JenkinsInfo> {\n    // load entity\n    const entity = await this.catalog.getEntityByRef(opt.entityRef, {\n      token: opt.backstageToken,\n    });\n    if (!entity) {\n      throw new Error(\n        `Couldn't find entity with name: ${stringifyEntityRef(opt.entityRef)}`,\n      );\n    }\n\n    // lookup `[jenkinsName#]jobFullName` from entity annotation\n    const jenkinsAndJobName =\n      DefaultJenkinsInfoProvider.getEntityAnnotationValue(entity);\n    if (!jenkinsAndJobName) {\n      throw new Error(\n        `Couldn't find jenkins annotation (${\n          DefaultJenkinsInfoProvider.NEW_JENKINS_ANNOTATION\n        }) on entity with name: ${stringifyEntityRef(opt.entityRef)}`,\n      );\n    }\n\n    let jobFullName;\n    let jenkinsName: string | undefined;\n    const splitIndex = jenkinsAndJobName.indexOf(':');\n    if (splitIndex === -1) {\n      // no jenkinsName specified, use default\n      jobFullName = jenkinsAndJobName;\n    } else {\n      // There is a jenkinsName specified\n      jenkinsName = jenkinsAndJobName.substring(0, splitIndex);\n      jobFullName = jenkinsAndJobName.substring(\n        splitIndex + 1,\n        jenkinsAndJobName.length,\n      );\n    }\n\n    // lookup baseURL + creds from config\n    const instanceConfig = this.config.getInstanceConfig(jenkinsName);\n\n    const creds = Buffer.from(\n      `${instanceConfig.username}:${instanceConfig.apiKey}`,\n      'binary',\n    ).toString('base64');\n\n    return {\n      baseUrl: instanceConfig.baseUrl,\n      headers: {\n        Authorization: `Basic ${creds}`,\n        ...instanceConfig.extraRequestHeaders,\n      },\n      jobFullName,\n      crumbIssuer: instanceConfig.crumbIssuer,\n    };\n  }\n\n  private static getEntityAnnotationValue(entity: Entity) {\n    return (\n      entity.metadata.annotations?.[\n        DefaultJenkinsInfoProvider.OLD_JENKINS_ANNOTATION\n      ] ||\n      entity.metadata.annotations?.[\n        DefaultJenkinsInfoProvider.NEW_JENKINS_ANNOTATION\n      ]\n    );\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { JenkinsInfo } from './jenkinsInfoProvider';\nimport Jenkins from 'jenkins';\nimport type {\n  BackstageBuild,\n  BackstageProject,\n  JenkinsBuild,\n  JenkinsProject,\n  ScmDetails,\n} from '../types';\nimport {\n  AuthorizeResult,\n  PermissionEvaluator,\n} from '@backstage/plugin-permission-common';\nimport { jenkinsExecutePermission } from '@backstage/plugin-jenkins-common';\nimport fetch, { HeaderInit } from 'node-fetch';\n\nexport class JenkinsApiImpl {\n  private static readonly lastBuildTreeSpec = `lastBuild[\n                    number,\n                    url,\n                    fullDisplayName,\n                    displayName,\n                    building,\n                    result,\n                    timestamp,\n                    duration,\n                    actions[\n                      *[\n                        *[\n                          *[\n                            *\n                          ]\n                        ]\n                      ]\n                    ]\n                  ],`;\n\n  private static readonly jobTreeSpec = `actions[*],\n                   ${JenkinsApiImpl.lastBuildTreeSpec}\n                   jobs{0,1},\n                   name,\n                   fullName,\n                   displayName,\n                   fullDisplayName,\n                   inQueue`;\n\n  private static readonly jobsTreeSpec = `jobs[\n                   ${JenkinsApiImpl.jobTreeSpec}\n                 ]{0,50}`;\n\n  constructor(private readonly permissionApi?: PermissionEvaluator) {}\n\n  /**\n   * Get a list of projects for the given JenkinsInfo.\n   * @see ../../../jenkins/src/api/JenkinsApi.ts#getProjects\n   */\n  async getProjects(jenkinsInfo: JenkinsInfo, branches?: string[]) {\n    const client = await JenkinsApiImpl.getClient(jenkinsInfo);\n    const projects: BackstageProject[] = [];\n\n    if (branches) {\n      // Assume jenkinsInfo.jobFullName is a MultiBranch Pipeline project which contains one job per branch.\n      // TODO: extract a strategy interface for this\n      const job = await Promise.any(\n        branches.map(branch =>\n          client.job.get({\n            name: `${jenkinsInfo.jobFullName}/${encodeURIComponent(branch)}`,\n            tree: JenkinsApiImpl.jobTreeSpec.replace(/\\s/g, ''),\n          }),\n        ),\n      );\n      projects.push(this.augmentProject(job));\n    } else {\n      // We aren't filtering\n      // Assume jenkinsInfo.jobFullName is either\n      // a MultiBranch Pipeline (folder with one job per branch) project\n      // a Pipeline (standalone) project\n      const project = await client.job.get({\n        name: jenkinsInfo.jobFullName,\n        // Filter only be the information we need, instead of loading all fields.\n        // Limit to only show the latest build for each job and only load 50 jobs\n        // at all.\n        // Whitespaces are only included for readability here and stripped out\n        // before sending to Jenkins\n        tree: JenkinsApiImpl.jobsTreeSpec.replace(/\\s/g, ''),\n      });\n\n      const isStandaloneProject = !project.jobs;\n      if (isStandaloneProject) {\n        const standaloneProject = await client.job.get({\n          name: jenkinsInfo.jobFullName,\n          tree: JenkinsApiImpl.jobTreeSpec.replace(/\\s/g, ''),\n        });\n        projects.push(this.augmentProject(standaloneProject));\n        return projects;\n      }\n      for (const jobDetails of project.jobs) {\n        // for each branch (we assume)\n        projects.push(this.augmentProject(jobDetails));\n      }\n    }\n    return projects;\n  }\n\n  /**\n   * Get a single build.\n   * @see ../../../jenkins/src/api/JenkinsApi.ts#getBuild\n   */\n  async getBuild(\n    jenkinsInfo: JenkinsInfo,\n    jobFullName: string,\n    buildNumber: number,\n  ) {\n    const client = await JenkinsApiImpl.getClient(jenkinsInfo);\n\n    const project = await client.job.get({\n      name: jobFullName,\n      depth: 1,\n    });\n\n    const build = await client.build.get(jobFullName, buildNumber);\n    const jobScmInfo = JenkinsApiImpl.extractScmDetailsFromJob(project);\n\n    return this.augmentBuild(build, jobScmInfo);\n  }\n\n  /**\n   * Trigger a build of a project\n   * @see ../../../jenkins/src/api/JenkinsApi.ts#retry\n   */\n  async rebuildProject(\n    jenkinsInfo: JenkinsInfo,\n    jobFullName: string,\n    buildNumber: number,\n    resourceRef: string,\n    options?: { token?: string },\n  ): Promise<number> {\n    if (this.permissionApi) {\n      const response = await this.permissionApi.authorize(\n        [{ permission: jenkinsExecutePermission, resourceRef }],\n        { token: options?.token },\n      );\n      // permission api returns always at least one item, we need to check only one result since we do not expect any additional results\n      const { result } = response[0];\n      if (result === AuthorizeResult.DENY) {\n        return 401;\n      }\n    }\n\n    const buildUrl = this.getBuildUrl(jenkinsInfo, jobFullName, buildNumber);\n\n    // the current SDK only supports triggering a new build\n    // replay the job by triggering request directly from Jenkins api\n    const response = await fetch(`${buildUrl}/replay/rebuild`, {\n      method: 'post',\n      headers: jenkinsInfo.headers as HeaderInit,\n    });\n    return response.status;\n  }\n\n  // private helper methods\n\n  private static async getClient(jenkinsInfo: JenkinsInfo) {\n    // The typings for the jenkins library are out of date so just cast to any\n    return new (Jenkins as any)({\n      baseUrl: jenkinsInfo.baseUrl,\n      headers: jenkinsInfo.headers,\n      promisify: true,\n      crumbIssuer: jenkinsInfo.crumbIssuer,\n    });\n  }\n\n  private augmentProject(project: JenkinsProject): BackstageProject {\n    let status: string;\n\n    if (project.inQueue) {\n      status = 'queued';\n    } else if (!project.lastBuild) {\n      status = 'build not found';\n    } else if (project.lastBuild.building) {\n      status = 'running';\n    } else if (!project.lastBuild.result) {\n      status = 'unknown';\n    } else {\n      status = project.lastBuild.result;\n    }\n\n    const jobScmInfo = JenkinsApiImpl.extractScmDetailsFromJob(project);\n\n    return {\n      ...project,\n      lastBuild: project.lastBuild\n        ? this.augmentBuild(project.lastBuild, jobScmInfo)\n        : null,\n      status,\n      // actions: undefined,\n    };\n  }\n\n  private augmentBuild(\n    build: JenkinsBuild,\n    jobScmInfo: ScmDetails | undefined,\n  ): BackstageBuild {\n    const source =\n      build.actions\n        .filter(\n          (action: any) =>\n            action?._class === 'hudson.plugins.git.util.BuildData',\n        )\n        .map((action: any) => {\n          const [first]: any = Object.values(action.buildsByBranchName);\n          const branch = first.revision.branch[0];\n          return {\n            branchName: branch.name,\n            commit: {\n              hash: branch.SHA1.substring(0, 8),\n            },\n          };\n        })\n        .pop() || {};\n\n    if (jobScmInfo) {\n      source.url = jobScmInfo.url;\n      source.displayName = jobScmInfo.displayName;\n      source.author = jobScmInfo.author;\n    }\n\n    let status: string;\n    if (build.building) {\n      status = 'running';\n    } else if (!build.result) {\n      status = 'unknown';\n    } else {\n      status = build.result;\n    }\n    return {\n      ...build,\n      status,\n      source: source,\n      tests: this.getTestReport(build),\n    };\n  }\n\n  private static extractScmDetailsFromJob(\n    project: JenkinsProject,\n  ): ScmDetails | undefined {\n    const scmInfo: ScmDetails | undefined = project.actions\n      .filter(\n        (action: any) =>\n          action?._class === 'jenkins.scm.api.metadata.ObjectMetadataAction',\n      )\n      .map((action: any) => {\n        return {\n          url: action?.objectUrl,\n          // https://javadoc.jenkins.io/plugin/scm-api/jenkins/scm/api/metadata/ObjectMetadataAction.html\n          // branch name for regular builds, pull request title on pull requests\n          displayName: action?.objectDisplayName,\n        };\n      })\n      .pop();\n\n    if (!scmInfo) {\n      return undefined;\n    }\n\n    const author = project.actions\n      .filter(\n        (action: any) =>\n          action?._class ===\n          'jenkins.scm.api.metadata.ContributorMetadataAction',\n      )\n      .map((action: any) => {\n        return action.contributorDisplayName;\n      })\n      .pop();\n\n    if (author) {\n      scmInfo.author = author;\n    }\n\n    return scmInfo;\n  }\n\n  private getTestReport(build: JenkinsBuild): {\n    total: number;\n    passed: number;\n    skipped: number;\n    failed: number;\n    testUrl: string;\n  } {\n    return build.actions\n      .filter(\n        (action: any) =>\n          action?._class === 'hudson.tasks.junit.TestResultAction',\n      )\n      .map((action: any) => {\n        return {\n          total: action.totalCount,\n          passed: action.totalCount - action.failCount - action.skipCount,\n          skipped: action.skipCount,\n          failed: action.failCount,\n          testUrl: `${build.url}${action.urlName}/`,\n        };\n      })\n      .pop();\n  }\n\n  private getBuildUrl(\n    jenkinsInfo: JenkinsInfo,\n    jobFullName: string,\n    buildId: number,\n  ): string {\n    const jobs = jobFullName.split('/');\n    return `${jenkinsInfo.baseUrl}/job/${jobs.join('/job/')}/${buildId}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorHandler } from '@backstage/backend-common';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport { JenkinsInfoProvider } from './jenkinsInfoProvider';\nimport { JenkinsApiImpl } from './jenkinsApi';\nimport {\n  PermissionAuthorizer,\n  PermissionEvaluator,\n  toPermissionEvaluator,\n} from '@backstage/plugin-permission-common';\nimport { getBearerTokenFromAuthorizationHeader } from '@backstage/plugin-auth-node';\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { stringifyError } from '@backstage/errors';\nimport { createPermissionIntegrationRouter } from '@backstage/plugin-permission-node';\nimport { jenkinsPermissions } from '@backstage/plugin-jenkins-common';\n\n/** @public */\nexport interface RouterOptions {\n  logger: Logger;\n  jenkinsInfoProvider: JenkinsInfoProvider;\n  permissions?: PermissionEvaluator | PermissionAuthorizer;\n}\n\n/** @public */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { jenkinsInfoProvider, permissions, logger } = options;\n\n  let permissionEvaluator: PermissionEvaluator | undefined;\n  if (permissions && 'authorizeConditional' in permissions) {\n    permissionEvaluator = permissions as PermissionEvaluator;\n  } else {\n    logger.warn(\n      'PermissionAuthorizer is deprecated. Please use an instance of PermissionEvaluator instead of PermissionAuthorizer in PluginEnvironment#permissions',\n    );\n    permissionEvaluator = permissions\n      ? toPermissionEvaluator(permissions)\n      : undefined;\n  }\n\n  const jenkinsApi = new JenkinsApiImpl(permissionEvaluator);\n\n  const router = Router();\n  router.use(express.json());\n  router.use(\n    createPermissionIntegrationRouter({\n      permissions: jenkinsPermissions,\n    }),\n  );\n\n  router.get(\n    '/v1/entity/:namespace/:kind/:name/projects',\n    async (request, response) => {\n      const { namespace, kind, name } = request.params;\n      const token = getBearerTokenFromAuthorizationHeader(\n        request.header('authorization'),\n      );\n      const branch = request.query.branch;\n      let branches: string[] | undefined;\n\n      if (branch === undefined) {\n        branches = undefined;\n      } else if (typeof branch === 'string') {\n        branches = branch.split(/,/g);\n      } else {\n        // this was passed in as something weird -> 400\n        // https://evanhahn.com/gotchas-with-express-query-parsing-and-how-to-avoid-them/\n        response\n          .status(400)\n          .send('Something was unexpected about the branch queryString');\n\n        return;\n      }\n\n      const jenkinsInfo = await jenkinsInfoProvider.getInstance({\n        entityRef: {\n          kind,\n          namespace,\n          name,\n        },\n        backstageToken: token,\n      });\n\n      try {\n        const projects = await jenkinsApi.getProjects(jenkinsInfo, branches);\n\n        response.json({\n          projects: projects,\n        });\n      } catch (err) {\n        // Promise.any, used in the getProjects call returns an Aggregate error message with a useless error message 'AggregateError: All promises were rejected'\n        // extract useful information ourselves\n        if (err.errors) {\n          throw new Error(\n            `Unable to fetch projects, for ${\n              jenkinsInfo.jobFullName\n            }: ${stringifyError(err.errors)}`,\n          );\n        }\n        throw err;\n      }\n    },\n  );\n\n  router.get(\n    '/v1/entity/:namespace/:kind/:name/job/:jobFullName/:buildNumber',\n    async (request, response) => {\n      const token = getBearerTokenFromAuthorizationHeader(\n        request.header('authorization'),\n      );\n      const { namespace, kind, name, jobFullName, buildNumber } =\n        request.params;\n\n      const jenkinsInfo = await jenkinsInfoProvider.getInstance({\n        entityRef: {\n          kind,\n          namespace,\n          name,\n        },\n        jobFullName,\n        backstageToken: token,\n      });\n\n      const build = await jenkinsApi.getBuild(\n        jenkinsInfo,\n        jobFullName,\n        parseInt(buildNumber, 10),\n      );\n\n      response.json({\n        build: build,\n      });\n    },\n  );\n\n  router.post(\n    '/v1/entity/:namespace/:kind/:name/job/:jobFullName/:buildNumber',\n    async (request, response) => {\n      const { namespace, kind, name, jobFullName, buildNumber } =\n        request.params;\n      const token = getBearerTokenFromAuthorizationHeader(\n        request.header('authorization'),\n      );\n      const jenkinsInfo = await jenkinsInfoProvider.getInstance({\n        entityRef: {\n          kind,\n          namespace,\n          name,\n        },\n        jobFullName,\n        backstageToken: token,\n      });\n\n      const resourceRef = stringifyEntityRef({ kind, namespace, name });\n      const status = await jenkinsApi.rebuildProject(\n        jenkinsInfo,\n        jobFullName,\n        parseInt(buildNumber, 10),\n        resourceRef,\n        {\n          token,\n        },\n      );\n      response.json({}).status(status);\n    },\n  );\n  router.use(errorHandler());\n  return router;\n}\n"],"names":["instanceConfig","stringifyEntityRef","__publicField","response","jenkinsExecutePermission","AuthorizeResult","fetch","Jenkins","toPermissionEvaluator","Router","express","createPermissionIntegrationRouter","jenkinsPermissions","getBearerTokenFromAuthorizationHeader","stringifyError","errorHandler"],"mappings":"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"}