/// <reference types="react" />
import * as react from 'react';
import react__default, { ReactElement, ReactNode } from 'react';
import * as _backstage_plugin_home_react from '@backstage/plugin-home-react';
import { createCardExtension as createCardExtension$1, CardExtensionProps as CardExtensionProps$1, CardLayout as CardLayout$1, CardSettings as CardSettings$1, CardConfig as CardConfig$1, ComponentParts as ComponentParts$1, ComponentRenderer as ComponentRenderer$1, RendererProps as RendererProps$1 } from '@backstage/plugin-home-react';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';

/** @public */
type Tool = {
    label: string;
    url: string;
    icon: react__default.ReactNode;
};

/**
 * Props for Toolkit Content component.
 *
 * @public
 */
type ToolkitContentProps = {
    tools: Tool[];
};

/** @public */
type ClockConfig = {
    label: string;
    timeZone: string;
};

/** @public */
declare const homePlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}, {}>;
/** @public */
declare const HomepageCompositionRoot: (props: {
    title?: string | undefined;
    children?: react.ReactNode;
}) => JSX.Element;
/** @public */
declare const ComponentAccordion: (props: {
    title: string;
    expanded?: boolean | undefined;
    Content: () => JSX.Element;
    Actions?: (() => JSX.Element) | undefined;
    Settings?: (() => JSX.Element) | undefined;
    ContextProvider?: ((props: any) => JSX.Element) | undefined;
}) => JSX.Element;
/** @public */
declare const ComponentTabs: (props: {
    title: string;
    tabs: {
        label: string;
        Component: () => JSX.Element;
    }[];
}) => JSX.Element;
/** @public */
declare const ComponentTab: (props: {
    title: string;
    Content: () => JSX.Element;
    ContextProvider?: ((props: any) => JSX.Element) | undefined;
}) => JSX.Element;
/**
 * A component to display a playful greeting for the user.
 *
 * @public
 */
declare const WelcomeTitle: () => JSX.Element;
/**
 * A component to display a company logo for the user.
 *
 * @public
 */
declare const HomePageCompanyLogo: (props: {
    logo?: react.ReactNode;
    className?: string | undefined;
}) => JSX.Element;
/** @public */
declare const HomePageRandomJoke: (props: _backstage_plugin_home_react.CardExtensionProps<{
    defaultCategory?: "any" | "programming" | undefined;
}>) => JSX.Element;
/**
 * A component to display a list of tools for the user.
 *
 * @public
 */
declare const HomePageToolkit: (props: _backstage_plugin_home_react.CardExtensionProps<ToolkitContentProps>) => JSX.Element;
/**
 * A component to display a list of starred entities for the user.
 *
 * @public
 */
declare const HomePageStarredEntities: (props: _backstage_plugin_home_react.CardExtensionProps<unknown>) => JSX.Element;
/**
 * A component to display a configurable list of clocks for various time zones.
 *
 * @public
 */
declare const HeaderWorldClock: (props: {
    clockConfigs: ClockConfig[];
    customTimeFormat?: Intl.DateTimeFormatOptions | undefined;
}) => JSX.Element | null;

/**
 * Layout configuration that can be passed to the custom home page.
 *
 * @public
 */
type LayoutConfiguration = {
    component: ReactElement | string;
    x: number;
    y: number;
    width: number;
    height: number;
};

/**
 * Breakpoint options for <CustomHomepageGridProps/>
 *
 * @public
 */
type Breakpoint = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
/**
 * Props customizing the <CustomHomepageGrid/> component.
 *
 * @public
 */
type CustomHomepageGridProps = {
    /**
     * Children contain all widgets user can configure on their own homepage.
     */
    children?: ReactNode;
    /**
     * Default layout for the homepage before users have modified it.
     */
    config?: LayoutConfiguration[];
    /**
     * Height of grid row in pixels.
     * @defaultValue 60
     */
    rowHeight?: number;
    /**
     * Screen width in pixels for different breakpoints.
     * @defaultValue theme breakpoints
     */
    breakpoints?: Record<Breakpoint, number>;
    /**
     * Number of grid columns for different breakpoints.
     * @defaultValue \{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 \}
     */
    cols?: Record<Breakpoint, number>;
    /**
     * Grid container padding (x, y) in pixels for all or specific breakpoints.
     * @defaultValue [0, 0]
     * @example [10, 10]
     * @example \{ lg: [10, 10] \}
     */
    containerPadding?: [number, number] | Record<Breakpoint, [number, number]>;
    /**
     * Grid container margin (x, y) in pixels for all or specific breakpoints.
     * @defaultValue [0, 0]
     * @example [10, 10]
     * @example \{ lg: [10, 10] \}
     */
    containerMargin?: [number, number] | Record<Breakpoint, [number, number]>;
    /**
     * Maximum number of rows user can have in the grid.
     * @defaultValue unlimited
     */
    maxRows?: number;
    /**
     * Custom style for grid.
     */
    style?: react__default.CSSProperties;
    /**
     * Compaction type of widgets in the grid. This controls where widgets are moved in case
     * they are overlapping in the grid.
     */
    compactType?: 'vertical' | 'horizontal' | null;
    /**
     * Controls if widgets can overlap in the grid. If true, grid can be placed one over the other.
     * @defaultValue false
     */
    allowOverlap?: boolean;
    /**
     * Controls if widgets can collide with each other. If true, grid items won't change position when being dragged over.
     * @defaultValue false
     */
    preventCollision?: boolean;
};
/**
 * A component that allows customizing components in home grid layout.
 *
 * @public
 */
declare const CustomHomepageGrid: (props: CustomHomepageGridProps) => JSX.Element;

/** @public */
declare const TemplateBackstageLogo: (props: {
    classes: {
        svg: string;
        path: string;
    };
}) => JSX.Element;

/** @public */
declare const TemplateBackstageLogoIcon: () => JSX.Element;

/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
declare const createCardExtension: typeof createCardExtension$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type CardExtensionProps<T> = CardExtensionProps$1<T>;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type CardLayout = CardLayout$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type CardSettings = CardSettings$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type CardConfig = CardConfig$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type ComponentParts = ComponentParts$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type ComponentRenderer = ComponentRenderer$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type RendererProps = RendererProps$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
declare const SettingsModal: (props: {
    open: boolean;
    close: Function;
    componentName: string;
    children: JSX.Element;
}) => JSX.Element;

export { Breakpoint, CardConfig, CardExtensionProps, CardLayout, CardSettings, ClockConfig, ComponentAccordion, ComponentParts, ComponentRenderer, ComponentTab, ComponentTabs, CustomHomepageGrid, CustomHomepageGridProps, HeaderWorldClock, HomePageCompanyLogo, HomePageRandomJoke, HomePageStarredEntities, HomePageToolkit, HomepageCompositionRoot, LayoutConfiguration, RendererProps, SettingsModal, TemplateBackstageLogo, TemplateBackstageLogoIcon, Tool, ToolkitContentProps, WelcomeTitle, createCardExtension, homePlugin };
