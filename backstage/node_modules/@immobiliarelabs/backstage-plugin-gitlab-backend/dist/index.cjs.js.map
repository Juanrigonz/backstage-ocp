{"version":3,"file":"index.cjs.js","sources":["../src/service/router.ts","../src/processor/urls.ts","../src/annotations.ts","../src/processor/processor.ts"],"sourcesContent":["import { errorHandler } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport {\n    readGitLabIntegrationConfigs,\n    GitLabIntegrationConfig,\n} from '@backstage/integration';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport { createProxyMiddleware } from 'http-proxy-middleware';\nimport { IncomingMessage } from 'http';\n\nfunction getBasePath(config: Config) {\n    const baseUrl = config.getOptionalString('backend.baseUrl');\n    if (!baseUrl) {\n        return undefined;\n    }\n    return new URL(baseUrl).pathname.replace(/\\/$/, '');\n}\n\nexport interface RouterOptions {\n    logger: Logger;\n    config: Config;\n}\n\nexport async function createRouter(\n    options: RouterOptions\n): Promise<express.Router> {\n    const { logger, config } = options;\n    const secure = config.getOptionalBoolean('gitlab.proxySecure');\n    const basePath = getBasePath(config) || '';\n\n    const gitlabIntegrations: GitLabIntegrationConfig[] =\n        readGitLabIntegrationConfigs(\n            config.getConfigArray('integrations.gitlab')\n        );\n\n    const router = Router();\n\n    // We are filtering the proxy request headers here rather than in\n    // `onProxyReq` because when global-agent is enabled then `onProxyReq`\n    // fires _after_ the agent has already sent the headers to the proxy\n    // target, causing a ERR_HTTP_HEADERS_SENT crash\n    const filter = (_pathname: string, req: IncomingMessage): boolean => {\n        if (req.headers['authorization']) delete req.headers['authorization'];\n        return req.method === 'GET';\n    };\n\n    for (const { host, apiBaseUrl, token } of gitlabIntegrations) {\n        const apiUrl = new URL(apiBaseUrl);\n        router.use(\n            `/${host}`,\n            createProxyMiddleware(filter, {\n                target: apiUrl.origin,\n                changeOrigin: true,\n                headers: {\n                    ...(token ? { 'PRIVATE-TOKEN': token } : {}),\n                },\n                secure,\n                logProvider: () => logger,\n                pathRewrite: {\n                    [`^${basePath}/api/gitlab/${host}`]: apiUrl.pathname,\n                },\n            })\n        );\n    }\n\n    router.use(errorHandler());\n    return router;\n}\n","import { join } from 'path';\n\n// Converts\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   https://gitlab.com/api/v4/projects/teams/teamA/subgroupA/repoA\nexport function buildProjectUrl(target: string): URL {\n    try {\n        const url = new URL(target);\n\n        const repoPathIdentifier = url.pathname\n            .split('/blob/')\n            .splice(0, 1)\n            .join('/')\n            .split('/-')\n            .splice(0, 1)\n            .join('/');\n\n        url.pathname = join(\n            'api/v4/projects',\n            encodeURIComponent(repoPathIdentifier.slice(1))\n        );\n        return url;\n    } catch (e) {\n        throw new Error(`Incorrect url: ${target}, ${e}`);\n    }\n}\n\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   groupA/teams/teamA/subgroupA/repoA\n/**\n *\n * @param target https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n * @returns repo path ex. groupA/teams/teamA/subgroupA/repoA\n */\nexport function getProjectPath(target: string): string {\n    const url = new URL(target);\n\n    return url.pathname\n        .split('/blob/')\n        .splice(0, 1)\n        .join('/')\n        .split('/-')\n        .splice(0, 1)\n        .join('/')\n        .slice(1);\n}\n","export const GITLAB_PROJECT_SLUG = 'gitlab.com/project-slug';\nexport const GITLAB_PROJECT_ID = 'gitlab.com/project-id';\nexport const GITLAB_INSTANCE = 'gitlab.com/instance';\n","import type { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n    readGitLabIntegrationConfigs,\n    GitLabIntegrationConfig,\n} from '@backstage/integration';\nimport { getProjectPath } from './urls';\nimport type {\n    CatalogProcessor,\n    CatalogProcessorEmit,\n} from '@backstage/plugin-catalog-node';\nimport {\n    GITLAB_INSTANCE,\n    GITLAB_PROJECT_ID,\n    GITLAB_PROJECT_SLUG,\n} from './../annotations';\nimport type { LocationSpec } from '@backstage/plugin-catalog-common';\n\n/** @public */\nexport class GitlabFillerProcessor implements CatalogProcessor {\n    private readonly allowedKinds: Set<string>;\n    private readonly gitLabIntegrationsConfig: GitLabIntegrationConfig[];\n\n    constructor(config: Config) {\n        const allowedKinds = config.getOptionalStringArray(\n            'gitlab.allowedKinds'\n        ) || ['Component'];\n        this.gitLabIntegrationsConfig = readGitLabIntegrationConfigs(\n            config.getConfigArray('integrations.gitlab')\n        );\n\n        this.allowedKinds = new Set(\n            allowedKinds.map((str) => str.toLowerCase())\n        );\n    }\n\n    getProcessorName(): string {\n        return 'GitlabFillerProcessor';\n    }\n\n    async postProcessEntity(\n        entity: Entity,\n        location: LocationSpec,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        _emit: CatalogProcessorEmit\n    ): Promise<Entity> {\n        // Check if we should process its kind first\n        if (this.isAllowedEntity(entity)) {\n            // Check if it has a GitLab integration\n            const gitlabInstance = this.getGitlabInstance(location.target);\n            if (gitlabInstance) {\n                if (!entity.metadata.annotations)\n                    entity.metadata.annotations = {};\n\n                // Set GitLab Instance\n                if (!entity.metadata.annotations?.[GITLAB_INSTANCE]) {\n                    entity.metadata.annotations![GITLAB_INSTANCE] =\n                        gitlabInstance;\n                }\n\n                // Generate Project Slug from location URL if neither Project ID nor Project Slug are specified\n                if (\n                    !entity.metadata.annotations?.[GITLAB_PROJECT_ID] &&\n                    !entity.metadata.annotations?.[GITLAB_PROJECT_SLUG]\n                ) {\n                    entity.metadata.annotations![GITLAB_PROJECT_SLUG] =\n                        getProjectPath(location.target);\n                }\n            }\n        }\n\n        return entity;\n    }\n\n    private getGitlabInstance(target: string): string | undefined {\n        let url: URL;\n        try {\n            url = new URL(target);\n        } catch (e) {\n            return undefined;\n        }\n\n        const gitlabConfig = this.gitLabIntegrationsConfig.find((config) => {\n            const baseUrl = config.baseUrl\n                ? new URL(config.baseUrl)\n                : new URL(`https://${config.host}`);\n            return baseUrl.origin === url.origin;\n        });\n\n        return gitlabConfig?.host;\n    }\n\n    private isAllowedEntity(entity: Entity): boolean {\n        return this.allowedKinds.has(entity.kind.toLowerCase());\n    }\n}\n"],"names":["readGitLabIntegrationConfigs","Router","createProxyMiddleware","errorHandler"],"mappings":"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"}