{"version":3,"file":"IssuesTable-a34f0394.esm.js","sources":["../../src/components/widgets/MergeRequestsTable/columns.tsx","../../src/components/widgets/MergeRequestsTable/MergeRequestsTable.tsx","../../src/components/widgets/PipelinesTable/columns.tsx","../../src/components/widgets/PipelinesTable/PipelinesTable.tsx","../../src/components/widgets/IssuesTable/columns.tsx","../../src/components/widgets/IssuesTable/IssuesTable.tsx"],"sourcesContent":["import React from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { TableColumn } from '@backstage/core-components';\nimport type { MergeRequestSchema } from '@gitbeaker/rest';\nimport { getStatusIconType } from './Icons';\nimport Link from '@material-ui/core/Link';\n\nexport function createTitleColumn(): TableColumn<Record<string, unknown>> {\n    return {\n        title: 'Title',\n        field: 'title',\n        highlight: true,\n        render: (row: Partial<MergeRequestSchema>) => (\n            <Typography variant=\"body2\" noWrap>\n                {getStatusIconType(row as MergeRequestSchema)}\n                <Box ml={1} component=\"span\">\n                    <Link href={row.web_url} target=\"_blank\">\n                        {row.title}\n                    </Link>\n                </Box>\n            </Typography>\n        ),\n    };\n}\n","import React from 'react';\nimport { Table, TableColumn, Progress } from '@backstage/core-components';\nimport Alert from '@material-ui/lab/Alert';\nimport { useAsync } from 'react-use';\nimport {\n    gitlabInstance,\n    gitlabProjectId,\n    gitlabProjectSlug,\n} from '../../gitlabAppData';\nimport { GitlabCIApiRef } from '../../../api';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { getElapsedTime, getDuration } from '../../utils';\nimport { createTitleColumn } from './columns';\nimport type { MergeRequestSchema } from '@gitbeaker/rest';\n\ntype MergeRequestDenseTableProps = {\n    data: MergeRequestSchema[];\n    projectName: string;\n};\n\nexport const MergeRequestDenseTable = ({\n    data,\n    projectName,\n}: MergeRequestDenseTableProps) => {\n    const columns: TableColumn[] = [\n        { title: 'ID', field: 'id' },\n        createTitleColumn(),\n        { title: 'Creator', field: 'author' },\n        { title: 'State', field: 'state' },\n        { title: 'Created At', field: 'created_date' },\n        { title: 'Duration', field: 'duration' },\n    ];\n    const title = 'Gitlab Merge Request Status: ' + projectName;\n    const mappedData = data.map((mergeRequest) => {\n        return {\n            id: mergeRequest.id,\n            state: mergeRequest.state,\n            author: mergeRequest.author.username,\n            title: mergeRequest.title,\n            web_url: mergeRequest.web_url,\n            created_date: getElapsedTime(mergeRequest.created_at),\n            duration: getDuration(\n                mergeRequest.created_at,\n                mergeRequest.updated_at\n            ),\n        };\n    });\n\n    return (\n        <Table\n            title={title}\n            options={{ search: true, paging: true }}\n            columns={columns}\n            data={mappedData || []}\n        />\n    );\n};\n\nexport const MergeRequestsTable = ({}) => {\n    const project_id = gitlabProjectId();\n    const project_slug = gitlabProjectSlug();\n    const gitlab_instance = gitlabInstance();\n\n    const GitlabCIAPI = useApi(GitlabCIApiRef).build(\n        gitlab_instance || 'gitlab.com'\n    );\n\n    const { value, loading, error } = useAsync(async (): Promise<{\n        data: MergeRequestSchema[];\n        projectName: string;\n    }> => {\n        const projectDetails = await GitlabCIAPI.getProjectDetails(\n            project_slug || project_id\n        );\n\n        if (!projectDetails)\n            throw new Error('wrong project_slug or project_id');\n\n        const summary = await GitlabCIAPI.getMergeRequestsSummary(\n            projectDetails.id\n        );\n\n        if (!summary) throw new Error('Merge request summary is undefined!');\n\n        return { data: summary, projectName: projectDetails.name };\n    }, []);\n\n    if (loading) {\n        return <Progress />;\n    } else if (error) {\n        return <Alert severity=\"error\">{error.message}</Alert>;\n    } else if (!value) {\n        return (\n            <Alert severity=\"error\">\n                {'Merge request data are not available.'}\n            </Alert>\n        );\n    }\n\n    return <MergeRequestDenseTable {...value} />;\n};\n","import React from 'react';\nimport { Box, Typography, Link } from '@material-ui/core';\nimport {\n    StatusPending,\n    StatusRunning,\n    StatusOK,\n    StatusAborted,\n    StatusError,\n} from '@backstage/core-components';\nimport { TableColumn } from '@backstage/core-components';\nimport type { PipelineSchema } from '@gitbeaker/rest';\n\nexport const GitlabCIStateIndicator = ({\n    state,\n}: {\n    state: string | undefined;\n}) => {\n    switch (state) {\n        case 'pending':\n            return <StatusPending />;\n        case 'in_progress':\n            return <StatusRunning />;\n        case 'success':\n            return <StatusOK />;\n        case 'ERROR':\n        case 'failed':\n            return <StatusError />;\n        default:\n            return <StatusAborted />;\n    }\n};\n\nexport function createStatusColumn(): TableColumn<Record<string, unknown>> {\n    return {\n        title: 'Status',\n        render: (row: Partial<PipelineSchema>) => (\n            <Box display=\"flex\" alignItems=\"center\">\n                <GitlabCIStateIndicator state={row.status} />\n                <Typography variant=\"caption\">{row.status}</Typography>\n            </Box>\n        ),\n    };\n}\n\nexport function createWebURLColumn(): TableColumn<Record<string, unknown>> {\n    return {\n        title: 'Web URL',\n        render: (row: Partial<PipelineSchema>) => (\n            <Link\n                href={`${row.web_url}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                {row.web_url}\n            </Link>\n        ),\n    };\n}\n","import React from 'react';\nimport { Table, TableColumn, Progress } from '@backstage/core-components';\nimport Alert from '@material-ui/lab/Alert';\nimport { useAsync } from 'react-use';\nimport {\n    gitlabInstance,\n    gitlabProjectId,\n    gitlabProjectSlug,\n} from '../../gitlabAppData';\nimport { GitlabCIApiRef } from '../../../api';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { createStatusColumn, createWebURLColumn } from './columns';\nimport { getDuration, getElapsedTime } from '../../utils';\nimport type { PipelineSchema } from '@gitbeaker/rest';\n\nexport type PipelineDenseTableProps = {\n    projectName: string;\n    summary: PipelineSchema[];\n};\n\nexport const PipelineDenseTable = ({\n    projectName,\n    summary,\n}: PipelineDenseTableProps) => {\n    const columns: TableColumn[] = [\n        { title: 'Pipeline_ID', field: 'id' },\n        createStatusColumn(),\n        { title: 'Branch', field: 'ref' },\n        createWebURLColumn(),\n        { title: 'Created At', field: 'created_date' },\n        { title: 'Duration', field: 'duration' },\n    ];\n    const title = 'Gitlab Pipelines: ' + projectName;\n\n    const data = summary.map((pipelineObject) => {\n        return {\n            id: pipelineObject.id,\n            status: pipelineObject.status,\n            ref: pipelineObject.ref,\n            web_url: pipelineObject.web_url,\n            created_date: getElapsedTime(pipelineObject.created_at),\n            duration: getDuration(\n                pipelineObject.created_at,\n                pipelineObject.updated_at\n            ),\n        };\n    });\n\n    return (\n        <Table\n            title={title}\n            options={{ search: true, paging: true }}\n            columns={columns}\n            data={data || []}\n        />\n    );\n};\n\nexport const PipelinesTable = ({}) => {\n    const project_id = gitlabProjectId();\n    const project_slug = gitlabProjectSlug();\n    const gitlab_instance = gitlabInstance();\n\n    const GitlabCIAPI = useApi(GitlabCIApiRef).build(\n        gitlab_instance || 'gitlab.com'\n    );\n\n    const { value, loading, error } = useAsync(async () => {\n        const projectDetails = await GitlabCIAPI.getProjectDetails(\n            project_slug || project_id\n        );\n        if (!projectDetails)\n            throw new Error('wrong project_slug or project_id');\n\n        const summary = await GitlabCIAPI.getPipelineSummary(projectDetails.id);\n\n        if (!summary) throw new Error('Merge request summary is undefined!');\n        return { summary, projectName: projectDetails.name };\n    }, []);\n\n    if (loading) {\n        return <Progress />;\n    } else if (error) {\n        return <Alert severity=\"error\">{error.message}</Alert>;\n    } else if (!value) {\n        return (\n            <Alert severity=\"error\">{'pipeline value is not defined!'}</Alert>\n        );\n    }\n\n    return <PipelineDenseTable {...value} />;\n};\n","import {\n    Avatar,\n    StatusAborted,\n    StatusOK,\n    StatusPending,\n    TableColumn,\n} from '@backstage/core-components';\nimport { Box, Typography } from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport React from 'react';\nimport type { IssueSchema } from '@gitbeaker/rest';\n\nexport const IssueStateIndicator = (\n    issueObject: IssueSchema\n): TableColumn<Record<string, unknown>> => {\n    switch (issueObject.state) {\n        case 'opened':\n            return <StatusPending>open</StatusPending>;\n        case 'closed':\n            return <StatusOK>close</StatusOK>;\n        default:\n            return <StatusAborted />;\n    }\n};\n\nexport function IssueTitle(\n    issueObject: IssueSchema\n): TableColumn<Record<string, unknown>> {\n    return (\n        <Typography variant=\"body2\" noWrap>\n            <Box ml={1} component=\"span\">\n                <Link href={issueObject.web_url} target=\"_blank\">\n                    {issueObject.title}\n                </Link>\n            </Box>\n        </Typography>\n    );\n}\n\nexport function AuthorColumn(\n    issueObject: IssueSchema\n): TableColumn<Record<string, unknown>> {\n    return (\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Avatar\n                customStyles={{ width: 32, height: 32 }}\n                picture={issueObject.author.avatar_url}\n                displayName={issueObject.author.username}\n            />\n            <Typography variant=\"body2\" noWrap>\n                <Box ml={1} component=\"span\">\n                    <Link href={issueObject.author.web_url} target=\"_blank\">\n                        {issueObject.author.username}\n                    </Link>\n                </Box>\n            </Typography>\n        </Box>\n    );\n}\n","import { Progress, Table, TableColumn } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport Alert from '@material-ui/lab/Alert';\nimport React from 'react';\nimport { useAsync } from 'react-use';\nimport { GitlabCIApiRef } from '../../../api';\nimport {\n    gitlabInstance,\n    gitlabProjectId,\n    gitlabProjectSlug,\n} from '../../gitlabAppData';\nimport { getElapsedTime } from '../../utils';\nimport { AuthorColumn, IssueStateIndicator, IssueTitle } from './columns';\nimport type { IssueSchema } from '@gitbeaker/rest';\n\n// export type IssueObject = {\n//   id: string;\n//   project_id: string;\n//   title: string;\n//   state: IssueState;\n//   type: IssueType;\n//   description: string;\n//   created_at: string;\n//   updated_at: string;\n//   author: Author;\n// };\n\nexport const DenseTable = ({\n    issuesObjects,\n    projectName,\n}: {\n    issuesObjects: IssueSchema[];\n    projectName: string | undefined;\n}) => {\n    const columns: TableColumn<IssueSchema>[] = [\n        { title: 'Issue ID', field: 'id' },\n        { title: 'Title', render: IssueTitle },\n        { title: 'Author', render: AuthorColumn },\n        { title: 'Created At', field: 'created_at' },\n        { title: 'Issue Type', field: 'type' },\n        { title: 'Issue Status', render: IssueStateIndicator },\n    ];\n\n    const title = 'Gitlab Issues: ' + projectName;\n\n    const data = issuesObjects.map((issue) => ({\n        ...issue,\n        created_at: getElapsedTime(issue.created_at),\n    }));\n\n    return (\n        <Table\n            title={title}\n            options={{ search: true, paging: true }}\n            columns={columns}\n            data={data}\n        />\n    );\n};\n\nexport const IssuesTable = ({}) => {\n    const project_id = gitlabProjectId();\n    const project_slug = gitlabProjectSlug();\n    const gitlab_instance = gitlabInstance();\n\n    const GitlabCIAPI = useApi(GitlabCIApiRef).build(\n        gitlab_instance || 'gitlab.com'\n    );\n\n    const { value, loading, error } = useAsync(async (): Promise<{\n        data: IssueSchema[];\n        projectName: string;\n    }> => {\n        const projectDetails = await GitlabCIAPI.getProjectDetails(\n            project_slug || project_id\n        );\n        if (!projectDetails)\n            throw new Error('wrong project_slug or project_id');\n\n        const summary = await GitlabCIAPI.getIssuesSummary(projectDetails.id);\n\n        if (!summary) {\n            throw new Error('gitlab issues is undefined!');\n        }\n        const renderData = {\n            data: summary,\n            projectName: projectDetails.name,\n        };\n\n        return renderData;\n    }, []);\n\n    if (loading) {\n        return <Progress />;\n    } else if (error) {\n        return <Alert severity=\"error\">{error.message}</Alert>;\n    }\n\n    return (\n        <DenseTable\n            issuesObjects={value?.data || []}\n            projectName={value?.projectName}\n        />\n    );\n};\n"],"names":["Link"],"mappings":"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"}