/// <reference types="react" />
import * as _backstage_core_components from '@backstage/core-components';
import * as _backstage_catalog_model from '@backstage/catalog-model';
import { Entity } from '@backstage/catalog-model';
import * as react from 'react';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { DiscoveryApi, IdentityApi } from '@backstage/core-plugin-api';
import { RepositoryContributorSchema, UserSchema, PipelineSchema, MergeRequestSchema, ProjectSchema, IssueSchema, ReleaseSchema } from '@gitbeaker/rest';

/**
 * Properties for {@link ReleasesCard}
 *
 * @public
 */
interface ReleasesCardProps {
    /**
     * Filter
     *
     * all - show all releases (default)
     * patch - major, minor, patch - no pre-releases
     *
     */
    show?: string;
    /**
     * Limit - show only a maximum number of releases
     */
    limit?: number;
}

declare const gitlabPlugin: _backstage_core_plugin_api.BackstagePlugin<{}, {}, {}>;
declare const EntityGitlabContent: () => react.JSX.Element;
declare const EntityGitlabLanguageCard: ({}: {}) => react.JSX.Element;
declare const EntityGitlabPeopleCard: ({}: {}) => react.JSX.Element;
declare const EntityGitlabMergeRequestsTable: ({}: {}) => react.JSX.Element;
declare const EntityGitlabMergeRequestStatsCard: (props: {
    entity?: _backstage_catalog_model.Entity | undefined;
    variant?: _backstage_core_components.InfoCardVariants | undefined;
}) => react.JSX.Element;
declare const EntityGitlabPipelinesTable: ({}: {}) => react.JSX.Element;
declare const EntityGitlabReleasesCard: (props: ReleasesCardProps) => react.JSX.Element;
declare const EntityGitlabIssuesTable: ({}: {}) => react.JSX.Element;
declare const EntityGitlabReadmeCard: ({}: {}) => react.JSX.Element;

type PeopleCardEntityData = {
    name: string;
    email?: string;
    avatar_url?: string;
    id?: number;
    state?: string;
    username?: string;
    web_url?: string;
    full_path?: string;
};
type Languages = {
    [key: string]: number;
};

type ContributorsSummary = (RepositoryContributorSchema & Partial<UserSchema>)[];
type LanguagesSummary = Languages;
declare const GitlabCIApiRef: _backstage_core_plugin_api.ApiRef<GitlabCIBuilder>;
type GitlabCIBuilder = {
    build(gitlabInstance: string): GitlabCIApi;
};
type GitlabCIApi = {
    getPipelineSummary(projectID: string | number): Promise<PipelineSchema[] | undefined>;
    getContributorsSummary(projectID: string | number): Promise<ContributorsSummary | undefined>;
    getMergeRequestsSummary(projectID: string | number): Promise<MergeRequestSchema[] | undefined>;
    getMergeRequestsStatusSummary(projectID: string | number, count: number): Promise<MergeRequestSchema[] | undefined>;
    getProjectName(projectID: string | number): Promise<string | undefined>;
    getLanguagesSummary(projectID: string | number): Promise<LanguagesSummary | undefined>;
    getProjectDetails(projectSlug: string): Promise<ProjectSchema | undefined>;
    getIssuesSummary(projectID: string | number): Promise<IssueSchema[] | undefined>;
    getCodeOwners(projectID: string | number, branch?: string, filePath?: string): Promise<PeopleCardEntityData[]>;
    getReleasesSummary(projectID: string | number): Promise<ReleaseSchema[] | undefined>;
    getContributorsLink(projectWebUrl: string, projectDefaultBranch: string): string;
    getOwnersLink(projectWebUrl: string, projectDefaultBranch: string, codeOwnersPath?: string): string;
    getReadme(projectID: string | number, branch?: string, filePath?: string): Promise<string | undefined>;
};

declare class GitlabCIClient implements GitlabCIApi {
    discoveryApi: DiscoveryApi;
    identityApi: IdentityApi;
    codeOwnersPath: string;
    gitlabInstance: string;
    readmePath: string;
    constructor({ discoveryApi, identityApi, codeOwnersPath, readmePath, gitlabInstance, }: {
        discoveryApi: DiscoveryApi;
        identityApi: IdentityApi;
        codeOwnersPath?: string;
        readmePath?: string;
        gitlabInstance: string;
    });
    static setupAPI({ discoveryApi, identityApi, codeOwnersPath, readmePath, }: {
        discoveryApi: DiscoveryApi;
        identityApi: IdentityApi;
        codeOwnersPath?: string;
        readmePath?: string;
    }): {
        build: (gitlabInstance: string) => GitlabCIClient;
    };
    protected callApi<T>(path: string, query: {
        [key in string]: string;
    }): Promise<T | undefined>;
    getPipelineSummary(projectID?: string | number): Promise<PipelineSchema[] | undefined>;
    getIssuesSummary(projectId: string | number): Promise<IssueSchema[] | undefined>;
    getProjectName(projectID?: string | number): Promise<string | undefined>;
    private getUserProfilesData;
    private getUserDetail;
    private getGroupDetail;
    getMergeRequestsSummary(projectID?: string | number): Promise<MergeRequestSchema[] | undefined>;
    getMergeRequestsStatusSummary(projectID?: string | number, count?: number): Promise<MergeRequestSchema[] | undefined>;
    getContributorsSummary(projectID?: string | number): Promise<ContributorsSummary | undefined>;
    getLanguagesSummary(projectID?: string | number): Promise<LanguagesSummary | undefined>;
    getReleasesSummary(projectID: string | number): Promise<ReleaseSchema[] | undefined>;
    getProjectDetails(projectSlug: string): Promise<ProjectSchema | undefined>;
    getCodeOwners(projectID: string | number, branch?: string, filePath?: string): Promise<PeopleCardEntityData[]>;
    getReadme(projectID: string | number, branch?: string, filePath?: string): Promise<string | undefined>;
    getContributorsLink(projectWebUrl: string, projectDefaultBranch: string): string;
    getOwnersLink(projectWebUrl: string, projectDefaultBranch: string, codeOwnersPath?: string): string;
}

declare const isGitlabAvailable: (entity: Entity) => boolean;

export { ContributorsSummary, EntityGitlabContent, EntityGitlabIssuesTable, EntityGitlabLanguageCard, EntityGitlabMergeRequestStatsCard, EntityGitlabMergeRequestsTable, EntityGitlabPeopleCard, EntityGitlabPipelinesTable, EntityGitlabReadmeCard, EntityGitlabReleasesCard, GitlabCIApi, GitlabCIApiRef, GitlabCIClient, LanguagesSummary, gitlabPlugin, isGitlabAvailable };
